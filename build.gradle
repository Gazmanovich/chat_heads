plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.2-SNAPSHOT" apply false
    id "com.matthewprenger.cursegradle" version "1.4.0" apply false
    id "com.modrinth.minotaur" version "2.+" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:1.17.1+build.63:v2"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    // version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
        maven { url = "https://maven.shedaniel.me/" }
        maven { url = "https://maven.terraformersmc.com/" }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }
}

subprojects {
    def loader = project.name
    if (!enabled_platforms.split(',').contains(loader))
        return

    version = project.mod_version + "-" + loader +  "-" + project.minecraft_version

    def toList = (String s) -> s.split(',').collect{ it.trim() }

    def changelogMd = rootProject.file('changelog.md').getText("UTF-8")
    def projectGameVersions = toList(property("${loader}_game_versions".toString()) as String)
    def lastGameVersion = projectGameVersions.last()

    apply plugin: "com.modrinth.minotaur"

    modrinth {
        def MODRINTH_TOKEN = System.getenv("MODRINTH_TOKEN")
        if (MODRINTH_TOKEN != null) {
            token = MODRINTH_TOKEN
            projectId = project.modrinth_id
            versionName = project.mod_version
            versionNumber = project.mod_version
            versionType = "release"
            uploadFile = remapJar
            changelog = changelogMd
            gameVersions = projectGameVersions
            loaders = [loader]
            dependencies {
                toList(project.optional_modrinth_dependencies).each{ optional.project(it) }
            }
        }
    }

    apply plugin: "com.matthewprenger.cursegradle"

    curseforge {
        def CURSEFORGE_TOKEN = System.getenv("CURSEFORGE_TOKEN")
        if (CURSEFORGE_TOKEN != null) {
            apiKey = CURSEFORGE_TOKEN
            project {
                id = project.curseforge_id
                releaseType = "release"
                changelogType = "markdown"
                changelog = changelogMd

                addGameVersion loader.capitalize()
                projectGameVersions.each{ addGameVersion(it) }

                relations {
                    toList(project.optional_curseforge_dependencies).each{ optionalDependency(it) }
                }
                mainArtifact(remapJar.archiveFile.get().asFile) {
                    displayName = "[${loader.capitalize()} ${lastGameVersion}] ${project.mod_version}"
                }
                afterEvaluate {
                    uploadTask.dependsOn("build")
                }
            }
            options {
                forgeGradleIntegration = false
                javaVersionAutoDetect = false
            }
        }
    }
}
